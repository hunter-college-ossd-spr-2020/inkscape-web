RETHINK!

I'm not sure about making it a debug toolbar... the mechanisms for populating the request data and then delivering that perhaps in a middleware means it would make sense for this to happen outside of the design of the page... Maybe as just a regular cms middleware simialr to cmsdiff's object middleware in someways.

This means that admin editing would be done in the admin interface.

Each of the requested files from static could be added to a StaticFile model, which notes the location of the original file and allows us to work with these files in regular editing situations.

Each user could create the last 10 requests which contain a list of media files for each of these requests, when we go to edit it we can then submit this as perhaps a slug and match it for editing.

These are just thoughts at this time.

RETHINK!

Many of the bits of useful code in debug_toolbar will need editing to get good information anyway.

It uses a crude way of storing all the objects in a unique hash, but we shouldbe smarter

Firstly any template context recording should be done by process load by using the id() of some central object.

A full theme editor would:

 * Use debug toolbar as a base
 * Enable editing of templates
 * Show context variables available
 * Allow editing of css, uploading of static images
 * Use folders to create new themes, so different ones can be used
 * Use a template loader module to choose the selected theme
 * Each theme is a git repository with undo/redo
 * No caching of templates (warn if caching is used)
