#!/usr/bin/env python
#
# Copyright 2013, Martin Owens <doctormo@gmail.com>
#
# This file is part of the software inkscape-web, consisting of custom 
# code for the Inkscape project's django-based website.
#
# inkscape-web is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# inkscape-web is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with inkscape-web.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Open django json dumps and update them to the latest versions so they
can be continued to be used as backups going forwards.

Downloads any media referenced in the backup and adds it to the fixture.

Usage: %s <content.json>
"""

import os
import sys
import json

from collections import defaultdict
from subprocess import PIPE, Popen
from urllib2 import urlopen

VERBOSE = '-v' in sys.argv
if VERBOSE:
    sys.argv.remove('-v')

MANAGE = os.path.join(os.path.dirname(__file__), 'manage')
try:
    A_USER = int( Popen([MANAGE, 'getauser'], stdout=PIPE).stdout.read().strip() )
except ValueError:
    sys.stderr.write("Can't restore data with no admin user setup.")
    sys.exit(1)

LIVE_URL = 'https://inkscape.org/media'
FIXTURE_MEDIA = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', 'data', 'fixtures', 'media'))

def delete(field=None, row=None, **kwargs):
    if not field:
        # Delete model (whole entry)
        kwargs['delete'].append(kwargs['item'])
        return True
    if row.has_key(field):
        # Delete field
        row.pop(field)
        return True
    return False

def set_to(field, r, where=None, value=None, row=None, **kwargs):
    if where and row[where] != value:
        return False
    if row.has_key(field) and row[field] != r:
        row[field] = r
        return True
    return False

def add_to(field, r, row, **kwargs):
    if not row.has_key(field):
        row[field] = r
        return True
    return False

def rename(field=None, to=None, row=None, **kwargs):
    if not to:
        # Rename model
        kwargs['item']['model'] = field
        return True

    if row.has_key(field):
        # Rename field
        row[to] = row.pop(field)
        return True
    return False

TRACK = defaultdict(list)
def unique(field, item, row, model, delete, **kwargs):
    global TRACK
    if row[field] in TRACK[model]:
        delete.append(item)
    else:
        TRACK[model].append(row[field])


SKIP_WEIGHT = 10
def download(field, row, **kwargs):
    """Downloads a media item from live website"""
    global SKIP_WEIGHT
    if SKIP_WEIGHT <= 0:
        return None

    media = row[field]
    local_path = os.path.join(FIXTURE_MEDIA, media)
    local_dir  = os.path.dirname(local_path)

    if os.path.isfile(local_path):
        SKIP_WEIGHT -= 1
        sys.stderr.write("Skipping: %s\n" % media)
        return True

    try:
        SKIP_WEIGHT += 100
        response = urlopen('%s/%s' % (LIVE_URL, media))
        sys.stderr.write("Downloading: %s\n" % media)
    except Exception:
        sys.stderr.write("Error getting: %s\n" % media)
        return False

    if not os.path.isdir(local_dir):
        os.makedirs(local_dir)

    with open(local_path, 'wb') as fhl:
        fhl.write(response.read())
    

def update_cms(field, row, **kwargs):
    if '.html' in row[field] and not row[field].startswith('cms/'):
        row[field] = "cms/" + row[field]
        return True
    return False

"""
PARENT_CACHE = {}
def update_treebeard(row, **kwargs):
    from importlib import import_module
    migration = import_module('cms.migrations.0005_auto_20140924_1039')
    page = row
    page.numchild = 0
    page.depth = 0
    page.path = ''
    global PARENT_CACHE
    PARENT_CACHE[page.pk] = page

    def _inner():
        last_root = None
        if not page.parent_id:
            handler = migration.MP_AddRootHandler(instance=page, last_root=last_root)
            handler.process()
            last_root = page
            page.last_child = page
        else:
            parent = PARENT_CACHE[page.parent_id]
            handler = migration.MP_AddChildHandler(parent, RowObject, instance=page)
            handler.process()
            parent.last_child = page
        return page

    if 'tree_id' in row:
        clean_up = ('last_child',)
        kwargs['deferred'].append((_inner, clean_up))
        return True
    return False
"""
    

UPDATES = {
  'cms.page': (
    [update_cms, 'template'],
    #[update_treebeard],
    [delete, 'moderator_state'],
    #[delete, 'tree_id'],
    #[delete, 'rght'],
    #[delete, 'lft'],
    #[delete, 'level'],
  ),
  'cms.cmsplugin': (
    #[update_treebeard],
    #[delete, 'tree_id'],
    #[delete, 'rght'],
    #[delete, 'lft'],
    #[delete, 'level'],
  ),
  'cms.usersettings': (
    [set_to, 'user', A_USER],
    [unique, 'user'],
  ),
  # Set the creator to admin account
  'cmsplugin_news.news': (
    [set_to, 'creator', A_USER],
    [set_to, 'editor', A_USER],
  ),
  'djangocms_file.file': (
    [download, 'file'],
  ),
  'djangocms_picture.picture': (
    [download, 'image'],
  ),
  'extra.shieldplugin': (
    [rename, 'cmstabs.shieldplugin'],
  ),
  'extra.tabcategory': (
    [rename, 'cmstabs.tabcategory'],
    [download, 'icon'],
  ),
  'projects.project': (
    [set_to, 'proposer', A_USER],
    [set_to, 'manager', A_USER],
    [set_to, 'reviewer', A_USER],
    [set_to, 'second', A_USER],
  ),
  'projects.projectupdate': (
    [set_to, 'creator', A_USER],
  ),
  'projects.worker': (
    [set_to, 'user', A_USER],
  ),
  'person.team': (
    [set_to, 'admin', A_USER],
    [delete, 'requests'],
  ),
  'cmstabs.tab': (
    [rename, 'cmstabs.tab'],
    [download, 'download'],
    [set_to, 'user', A_USER],
  ),
  'cmsplugin_pygments.pygmentsplugin': ([delete],),
  'djangocms_snippet.snippet': ([delete],),
  'djangocms_snippet.snippetptr': ([delete],),
}

def log(message):
    if VERBOSE:
        sys.stderr.write(message+"\n")


class RowObject(dict):
    """
    Takes a selections of fields and creates a fake object from them.
    """
    max_length = 255

    class __metaclass__(type):
        def __getattr__(cls, key):
            return cls

    def __init__(self, pk=None, row=None, **kwargs):
        object.__setattr__(self, 'pk', pk)
        if isinstance(row, dict):
            self.update(row)

    def __getattr__(self, key):
        if key in self:
            return self[key]
        if key[-3:] == '_id':
            return self.__getattr__(key[:-3])
        return self

    def __call__(self, *args, **kwargs):
        return self

    def __setattr__(self, key, value):
        self[key] = value


def update(content, updates):
    DEFERRED = []
    WARNED = []
    DELETE = []
    COUNT = {}

    for item in content:
        model = item['model']
        update = updates.get(model, [])

        if not update:
            if model not in WARNED:
                log("No updates for %s" % model)
                WARNED.append(model)
            continue
        COUNT[model] = COUNT.setdefault(model, {})
        item['fields'] = RowObject(item['pk'], item['fields'])
        for up in update:
            kwargs = dict(row=item['fields'], item=item, model=model,
                          delete=DELETE, deferred=DEFERRED)
            if up[0](*up[1:], **kwargs):
                if len(up) > 1:
                    COUNT[model][up[1]] = COUNT[model].setdefault(up[1], 0) + 1

    CLEANUP = []
    for (f, clean) in DEFERRED:
        CLEANUP.append([f(), clean])

    for (item, clean) in CLEANUP:
        for key in clean:
            item.pop(key, None)

    for d in DELETE:
        content.remove(d)

    for model, counts in COUNT.iteritems():
        log("Migrated %s: %s" % (model, str(counts)))


if __name__ == '__main__':
    if len(sys.argv) == 1 or (
      sys.argv[1] != '-' and not os.path.exists(sys.argv[1])):
        sys.stderr.write(str(__doc__) % str(sys.argv[0]))
        sys.exit(1)

    if sys.argv[1] == '-':
        content = json.loads(sys.stdin.read())
    else:
        with open(sys.argv[1], 'r') as fhl:
            content = json.loads(fhl.read())
    update(content, UPDATES)
    print json.dumps(content)

