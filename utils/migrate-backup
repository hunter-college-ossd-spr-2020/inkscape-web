#!/usr/bin/env python
#
# Copyright 2013, Martin Owens <doctormo@gmail.com>
#
# This file is part of the software inkscape-web, consisting of custom
# code for the Inkscape project's django-based website.
#
# inkscape-web is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# inkscape-web is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with inkscape-web.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Open django json dumps and update them to the latest versions so they
can be continued to be used as backups going forwards.

Downloads any media referenced in the backup and adds it to the fixture.

Usage: %s <content.json>
"""

import os
import sys
import json

from random import choice
from collections import defaultdict, OrderedDict
from subprocess import PIPE, Popen
from urllib.request import urlopen

VERBOSE = '-v' in sys.argv
if VERBOSE:
    sys.argv.remove('-v')

MANAGE = os.path.join(os.path.dirname(__file__), 'manage')
try:
    users = Popen([MANAGE, 'getauser'], stdout=PIPE).stdout.read()
    users = [int(a.strip()) for a in users.split() if a.strip()]
    A_USER = users[0]
except ValueError:
    sys.stderr.write("Can't restore data with no admin user setup.")
    sys.exit(1)

def random_user(field, **kw):
    return set_to(field, choice(users), **kw)

LIVE_URL = 'https://media.inkscape.org/media'
FIXTURE_MEDIA = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', 'data', 'fixtures', 'media'))

class DeleteValue(ValueError):
    pass

def delete(field=None, row=None, **kwargs):
    if not field:
        # Delete model (whole entry)
        raise DeleteValue(kwargs['item'])
    if field in row:
        # Delete field
        row.pop(field, None)
        return True
    return False

def set_to(field, r, where=None, value=None, row=None, **kwargs):
    if where and row[where] != value:
        return False
    if field in row and row[field] != r:
        row[field] = r
        return True
    return False

def add_to(field, r, row, **kwargs):
    if not field in row:
        row[field] = r
        return True
    return False

def rename(field=None, to=None, row=None, **kwargs):
    if not to:
        # Rename model
        kwargs['item']['model'] = field
        return True

    if field in row:
        # Rename field
        row[to] = row.pop(field)
        return True
    return False

TRACK = defaultdict(list)
def unique(field, item, row, model, **kwargs):
    global TRACK
    if row[field] in TRACK[model]:
        raise DeleteValue(item)
    else:
        TRACK[model].append(row[field])


SKIP_WEIGHT = 10
def download(field, row, **kwargs):
    """Downloads a media item from live website"""
    global SKIP_WEIGHT
    # This isn't helping
    #if SKIP_WEIGHT <= 0:
    #    return None

    media = row[field]
    local_path = os.path.join(FIXTURE_MEDIA, media)
    local_dir  = os.path.dirname(local_path)

    if not media.strip():
        return True

    if os.path.isfile(local_path):
        SKIP_WEIGHT -= 1
        #sys.stderr.write("Skipping: %s\n" % media)
        return True

    try:
        SKIP_WEIGHT += 100
        response = urlopen('%s/%s' % (LIVE_URL, media))
        sys.stderr.write("Downloading: %s\n" % media)
    except Exception:
        sys.stderr.write("Error getting: %s\n" % media)
        return False

    if not os.path.isdir(local_dir):
        os.makedirs(local_dir)

    with open(local_path, 'wb') as fhl:
        fhl.write(response.read())
    

def update_cms(field, row, **kwargs):
    if '.html' in row[field] and not row[field].startswith('cms/'):
        row[field] = "cms/" + row[field]
        return True
    return False


UPDATES = OrderedDict([
  ('cms.treenode', ()),
  ('cms.page', (
    [update_cms, 'template'],
    [delete, 'moderator_state'],
  )),
  ('cms.usersettings', (
    [set_to, 'user', A_USER],
    [unique, 'user'],
  )),
  # Set the creator to admin account
  ('cmsplugin_news.news', (
    [set_to, 'creator', A_USER],
    [set_to, 'editor', A_USER],
  )),
  ('cmsplugin_news.SocialMediaType', (
    [download, 'icon'],
  )),
  ('filer.file', (
    [download, 'file'],
  )),
  ('djangocms_picture.picture', (
    [download, 'image'],
  )),
  ('extra.shieldplugin', (
    [rename, 'cmstabs.shieldplugin'],
  )),
  ('projects.project', (
    [set_to, 'proposer', A_USER],
    [set_to, 'manager', A_USER],
    [set_to, 'reviewer', A_USER],
    [set_to, 'second', A_USER],
  )),
  ('projects.projectupdate', (
    [set_to, 'creator', A_USER],
  )),
  ('projects.worker', (
    [set_to, 'user', A_USER],
  )),
  ('person.team', (
    [set_to, 'admin', A_USER],
    [delete, 'requests'],
  )),
  ('cmstabs.tabcategory', (
    [download, 'icon'],
  )),
  ('cmstabs.tab', (
    [rename, 'cmstabs.tab'],
    [download, 'download'],
    [set_to, 'user', A_USER],
  )),
  ('cmsplugin_pygments.pygmentsplugin', ([delete],)),
  ('djangocms_snippet.snippet', ([delete],)),
  ('djangocms_snippet.snippetptr', ([delete],)),
  ('djangocms_picture.picture', (
      [rename, 'cmsplugin_image.image'],
      [rename, 'longdesc', 'title'],
      [download, 'image'],
  )),
  ('cmsplugin_image.image', (
      [download, 'image'],
  )),
  ('releases.release', (
      [download, 'background'],
      [set_to, 'manager', A_USER],
      [set_to, 'reviewer', A_USER],
      [set_to, 'bug_manager', A_USER],
      [set_to, 'translation_manager', A_USER],
  )),
  ('releases.platform', (
      [download, 'icon'],
      [download, 'image'],
      [set_to, 'manager', A_USER],
  )),
  ('releases.releasestatus', (
      [download, 'icon'],
  )),
  ('releases.releaseplatform', (
      [set_to, 'resource', None],
  )),
  ('resources.resource', (
      [download, 'thumbnail'],
      [download, 'download'],
      [download, 'rendering'],
      [random_user, 'user'],
      [set_to, 'checked_by', A_USER],
  )),
  ('resources.vote', (
      [random_user, 'voter'],
  )),
  ('resources.gallery', (
      [random_user, 'user'],
      [delete, 'group'],
  )),
  ('resources.resourcemirror', ([delete],)),
  ('resources.quota', ([delete],)),
])

def log(message):
    if VERBOSE:
        sys.stderr.write(message+"\n")


class RowObject(dict):
    """
    Takes a selections of fields and creates a fake object from them.
    """
    max_length = 255

    class __metaclass__(type):
        def __getattr__(cls, key):
            return cls

    def __init__(self, pk=None, row=None, **kwargs):
        object.__setattr__(self, 'pk', pk)
        if isinstance(row, dict):
            self.update(row)

    def __getattr__(self, key):
        if key in self:
            return self[key]
        if key[-3:] == '_id':
            return self.__getattr__(key[:-3])
        return self

    def __call__(self, *args, **kwargs):
        return self

    def __setattr__(self, key, value):
        self[key] = value


def update(content, updates):
    WARNED = []
    COUNT = defaultdict(lambda: defaultdict(int))
    ITEMS = defaultdict(list)

    for item in content:
        model = item['model']
        item['fields'] = RowObject(item['pk'], item['fields'])
        for up in updates.get(model, ()):
            kwargs = dict(row=item['fields'], item=item, model=model)
            try:
                if up[0](*up[1:], **kwargs) and len(up) > 1:
                    COUNT[model][up[1]] += 1
            except DeleteValue:
                # Delete means it's not included in ITEMS
                COUNT[model]['delete'] += 1
                item = None
                break
        if item:
            ITEMS[model].append(item)

    #CLEANUP = []
    #for (f, clean) in DEFERRED:
    #    CLEANUP.append([f(), clean])

    #for (item, clean) in CLEANUP:
    #    for key in clean:
    #        item.pop(key, None)

    for model, counts in COUNT.items():
        log("Migrated %s: %s" % (model, str(counts)))

    # Reorder the output according to the UPDATES list.
    for model in updates:
        for item in ITEMS.pop(model, []):
            yield item

    for model in ITEMS:
        for item in ITEMS[model]:
            yield item

if __name__ == '__main__':
    if len(sys.argv) == 1 or (
      sys.argv[1] != '-' and not os.path.exists(sys.argv[1])):
        sys.stderr.write(str(__doc__) % str(sys.argv[0]))
        sys.exit(1)

    if sys.argv[1] == '-':
        content = json.loads(sys.stdin.read())
    else:
        with open(sys.argv[1], 'r') as fhl:
            content = json.loads(fhl.read())

    out = sys.stdout
    out.write(json.dumps(list(update(content, UPDATES)), indent=2))

